{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\Desktop\\\\builders-guide-sample-app\\\\src\\\\store\\\\Provider.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * The react context used to cache the store instance\r\n */\nconst StoreContext = /*#__PURE__*/React.createContext(undefined);\n\n/**\r\n * A Context Provider component which should wrap any components that need to\r\n * receive a store via the `useStore` hook\r\n * @param store the store instance to provide to child components via `useStore`\r\n */\nexport const StoreProvider = _ref => {\n  let {\n    children,\n    store\n  } = _ref;\n  // const localStore = useLocalObservable(() => store);\n  return /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n    value: store,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\n/**\r\n * A React hook used to access the global store from child components that may be\r\n * nested many levels deep in the component tree\r\n */\n_c = StoreProvider;\nexport const useStore = () => {\n  _s();\n  const store = useContext(StoreContext);\n  if (!store) {\n    // raise an error if the context data has not been provided in a higher level component\n    throw new Error('useStore must be used within a StoreProvider.');\n  }\n  return store;\n};\n_s(useStore, \"Wl1jJrZzTCxjtMcqth/dX4wg3Uo=\");\nvar _c;\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["React","useContext","StoreContext","createContext","undefined","StoreProvider","children","store","useStore","Error"],"sources":["C:/Users/rodri/Desktop/builders-guide-sample-app/src/store/Provider.tsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Store } from './store';\r\n\r\n/**\r\n * The react context used to cache the store instance\r\n */\r\nconst StoreContext = React.createContext<Store | undefined>(undefined);\r\n\r\n/**\r\n * A Context Provider component which should wrap any components that need to\r\n * receive a store via the `useStore` hook\r\n * @param store the store instance to provide to child components via `useStore`\r\n */\r\nexport const StoreProvider: React.FC<{\r\n  children?: React.ReactNode;\r\n  store: Store;\r\n}> = ({ children, store }) => {\r\n  // const localStore = useLocalObservable(() => store);\r\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\r\n};\r\n\r\n/**\r\n * A React hook used to access the global store from child components that may be\r\n * nested many levels deep in the component tree\r\n */\r\nexport const useStore = (): Store => {\r\n  const store = useContext(StoreContext);\r\n  if (!store) {\r\n    // raise an error if the context data has not been provided in a higher level component\r\n    throw new Error('useStore must be used within a StoreProvider.');\r\n  }\r\n  return store;\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAAC;AAG1C;AACA;AACA;AACA,MAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAa,CAAoBC,SAAS,CAAC;;AAEtE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAGX,GAAG,QAAyB;EAAA,IAAxB;IAAEC,QAAQ;IAAEC;EAAM,CAAC;EACvB;EACA,oBAAO,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAEA,KAAM;IAAA,UAAED;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAyB;AAChF,CAAC;;AAED;AACA;AACA;AACA;AAHA,KARaD,aAGX;AASF,OAAO,MAAMG,QAAQ,GAAG,MAAa;EAAA;EACnC,MAAMD,KAAK,GAAGN,UAAU,CAACC,YAAY,CAAC;EACtC,IAAI,CAACK,KAAK,EAAE;IACV;IACA,MAAM,IAAIE,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,OAAOF,KAAK;AACd,CAAC;AAAC,GAPWC,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}