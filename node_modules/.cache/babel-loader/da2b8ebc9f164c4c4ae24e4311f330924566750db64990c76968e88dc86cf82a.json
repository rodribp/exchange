{"ast":null,"code":"export function createTrackingData(reaction) {\n  var trackingData = {\n    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n    reaction: reaction\n  };\n  return trackingData;\n}\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport var CLEANUP_TIMER_LOOP_MILLIS = 10000;\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nvar uncommittedReactionRefs = new Set();\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nvar reactionCleanupHandle;\nfunction ensureCleanupTimerRunning() {\n  if (reactionCleanupHandle === undefined) {\n    reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n  }\n}\nexport function scheduleCleanupOfReactionIfLeaked(ref) {\n  uncommittedReactionRefs.add(ref);\n  ensureCleanupTimerRunning();\n}\nexport function recordReactionAsCommitted(reactionRef) {\n  uncommittedReactionRefs.delete(reactionRef);\n}\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n  reactionCleanupHandle = undefined;\n  // Loop through all the candidate leaked reactions; those older\n  // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n  var now = Date.now();\n  uncommittedReactionRefs.forEach(function (ref) {\n    var tracking = ref.current;\n    if (tracking) {\n      if (now >= tracking.cleanAt) {\n        // It's time to tidy up this leaked reaction.\n        tracking.reaction.dispose();\n        ref.current = null;\n        uncommittedReactionRefs.delete(ref);\n      }\n    }\n  });\n  if (uncommittedReactionRefs.size > 0) {\n    // We've just finished a round of cleanups but there are still\n    // some leak candidates outstanding.\n    ensureCleanupTimerRunning();\n  }\n}\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n  // This allows us to control the execution of the cleanup timer\n  // to force it to run at awkward times in unit tests.\n  if (reactionCleanupHandle) {\n    clearTimeout(reactionCleanupHandle);\n    cleanUncommittedReactions();\n  }\n}\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n  if (reactionCleanupHandle) {\n    clearTimeout(reactionCleanupHandle);\n    reactionCleanupHandle = undefined;\n  }\n  uncommittedReactionRefs.clear();\n}","map":{"version":3,"names":["createTrackingData","reaction","trackingData","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","uncommittedReactionRefs","Set","reactionCleanupHandle","ensureCleanupTimerRunning","undefined","setTimeout","cleanUncommittedReactions","scheduleCleanupOfReactionIfLeaked","ref","add","recordReactionAsCommitted","reactionRef","delete","forEach","tracking","current","dispose","size","forceCleanupTimerToRunNowForTests","clearTimeout","resetCleanupScheduleForTests","clear"],"sources":["C:/Users/rodri/Desktop/builders-guide-sample-app/node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js"],"sourcesContent":["export function createTrackingData(reaction) {\n    var trackingData = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction: reaction\n    };\n    return trackingData;\n}\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport var CLEANUP_TIMER_LOOP_MILLIS = 10000;\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nvar uncommittedReactionRefs = new Set();\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nvar reactionCleanupHandle;\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n    }\n}\nexport function scheduleCleanupOfReactionIfLeaked(ref) {\n    uncommittedReactionRefs.add(ref);\n    ensureCleanupTimerRunning();\n}\nexport function recordReactionAsCommitted(reactionRef) {\n    uncommittedReactionRefs.delete(reactionRef);\n}\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined;\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n    var now = Date.now();\n    uncommittedReactionRefs.forEach(function (ref) {\n        var tracking = ref.current;\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose();\n                ref.current = null;\n                uncommittedReactionRefs.delete(ref);\n            }\n        }\n    });\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning();\n    }\n}\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle);\n        cleanUncommittedReactions();\n    }\n}\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle);\n        reactionCleanupHandle = undefined;\n    }\n    uncommittedReactionRefs.clear();\n}\n"],"mappings":"AAAA,OAAO,SAASA,kBAAkB,CAACC,QAAQ,EAAE;EACzC,IAAIC,YAAY,GAAG;IACfC,OAAO,EAAEC,IAAI,CAACC,GAAG,EAAE,GAAGC,qCAAqC;IAC3DL,QAAQ,EAAEA;EACd,CAAC;EACD,OAAOC,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,qCAAqC,GAAG,KAAK;AACxD;AACA;AACA;AACA,OAAO,IAAIC,yBAAyB,GAAG,KAAK;AAC5C;AACA;AACA;AACA,IAAIC,uBAAuB,GAAG,IAAIC,GAAG,EAAE;AACvC;AACA;AACA;AACA,IAAIC,qBAAqB;AACzB,SAASC,yBAAyB,GAAG;EACjC,IAAID,qBAAqB,KAAKE,SAAS,EAAE;IACrCF,qBAAqB,GAAGG,UAAU,CAACC,yBAAyB,EAAEP,yBAAyB,CAAC;EAC5F;AACJ;AACA,OAAO,SAASQ,iCAAiC,CAACC,GAAG,EAAE;EACnDR,uBAAuB,CAACS,GAAG,CAACD,GAAG,CAAC;EAChCL,yBAAyB,EAAE;AAC/B;AACA,OAAO,SAASO,yBAAyB,CAACC,WAAW,EAAE;EACnDX,uBAAuB,CAACY,MAAM,CAACD,WAAW,CAAC;AAC/C;AACA;AACA;AACA;AACA,SAASL,yBAAyB,GAAG;EACjCJ,qBAAqB,GAAGE,SAAS;EACjC;EACA;EACA,IAAIP,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE;EACpBG,uBAAuB,CAACa,OAAO,CAAC,UAAUL,GAAG,EAAE;IAC3C,IAAIM,QAAQ,GAAGN,GAAG,CAACO,OAAO;IAC1B,IAAID,QAAQ,EAAE;MACV,IAAIjB,GAAG,IAAIiB,QAAQ,CAACnB,OAAO,EAAE;QACzB;QACAmB,QAAQ,CAACrB,QAAQ,CAACuB,OAAO,EAAE;QAC3BR,GAAG,CAACO,OAAO,GAAG,IAAI;QAClBf,uBAAuB,CAACY,MAAM,CAACJ,GAAG,CAAC;MACvC;IACJ;EACJ,CAAC,CAAC;EACF,IAAIR,uBAAuB,CAACiB,IAAI,GAAG,CAAC,EAAE;IAClC;IACA;IACAd,yBAAyB,EAAE;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,iCAAiC,GAAG;EAChD;EACA;EACA,IAAIhB,qBAAqB,EAAE;IACvBiB,YAAY,CAACjB,qBAAqB,CAAC;IACnCI,yBAAyB,EAAE;EAC/B;AACJ;AACA;AACA,OAAO,SAASc,4BAA4B,GAAG;EAC3C,IAAIlB,qBAAqB,EAAE;IACvBiB,YAAY,CAACjB,qBAAqB,CAAC;IACnCA,qBAAqB,GAAGE,SAAS;EACrC;EACAJ,uBAAuB,CAACqB,KAAK,EAAE;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}