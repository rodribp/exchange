{"ast":null,"code":"//\n// Constants\n//\nconst API_URL = 'http://localhost:4000/api';\nconst WS_URL = 'ws://localhost:4000/api/events';\nconst TOKEN_KEY = 'token';\n\n//\n// token persistent storage\n//\nexport const getToken = () => sessionStorage.getItem(TOKEN_KEY) || '';\nexport const setToken = value => sessionStorage.setItem(TOKEN_KEY, value);\nexport const clearToken = () => sessionStorage.removeItem(TOKEN_KEY);\n\n//\n// Shared fetch wrapper funcs\n//\n\nconst httpGet = async path => {\n  const url = `${API_URL}/${path}`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      // add the token from localStorage into every request\n      'X-Token': getToken()\n    }\n  });\n  const json = await response.json();\n  if (json.error) {\n    throw new Error(json.error);\n  }\n  return json;\n};\nconst httpPost = async function (path) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const url = `${API_URL}/${path}`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      // add the token from localStorage into every request\n      'X-Token': getToken()\n    },\n    body: JSON.stringify(data)\n  });\n  const json = await response.json();\n  if (json.error) {\n    throw new Error(json.error);\n  }\n  return json;\n};\n\n//\n// Exported API functions\n//\n\n// open a WebSocket connection to the server\nexport const getEventsSocket = () => {\n  return new WebSocket(WS_URL);\n};\nexport const connect = async (host, cert, macaroon) => {\n  const request = {\n    host,\n    cert,\n    macaroon\n  };\n  const {\n    token\n  } = await httpPost('connect', request);\n  // save the token into the browser's storage\n  setToken(token);\n};\nexport const getInfo = async () => {\n  return await httpGet('info');\n};\nexport const fetchPosts = async () => {\n  return await httpGet('posts');\n};\nexport const createPost = async (title, content) => {\n  const request = {\n    title,\n    content\n  };\n  return await httpPost('posts', request);\n};\nexport const createInvoice = async postId => {\n  return await httpPost(`posts/${postId}/invoice`);\n};\nexport const upvotePost = async (postId, hash) => {\n  const request = {\n    hash\n  };\n  return await httpPost(`posts/${postId}/upvote`, request);\n};\nexport const verifyPost = async postId => {\n  return await httpPost(`posts/${postId}/verify`);\n};","map":{"version":3,"names":["API_URL","WS_URL","TOKEN_KEY","getToken","sessionStorage","getItem","setToken","value","setItem","clearToken","removeItem","httpGet","path","url","response","fetch","method","headers","json","error","Error","httpPost","data","body","JSON","stringify","getEventsSocket","WebSocket","connect","host","cert","macaroon","request","token","getInfo","fetchPosts","createPost","title","content","createInvoice","postId","upvotePost","hash","verifyPost"],"sources":["C:/Users/rodri/Desktop/builders-guide-sample-app/src/lib/api.ts"],"sourcesContent":["//\r\n// Constants\r\n//\r\nconst API_URL = 'http://localhost:4000/api';\r\nconst WS_URL = 'ws://localhost:4000/api/events';\r\nconst TOKEN_KEY = 'token';\r\n\r\n//\r\n// token persistent storage\r\n//\r\nexport const getToken = () => sessionStorage.getItem(TOKEN_KEY) || '';\r\nexport const setToken = (value: string) => sessionStorage.setItem(TOKEN_KEY, value);\r\nexport const clearToken = () => sessionStorage.removeItem(TOKEN_KEY);\r\n\r\n//\r\n// Shared fetch wrapper funcs\r\n//\r\n\r\nconst httpGet = async (path: string) => {\r\n  const url = `${API_URL}/${path}`;\r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // add the token from localStorage into every request\r\n      'X-Token': getToken(),\r\n    },\r\n  });\r\n  const json = await response.json();\r\n  if (json.error) {\r\n    throw new Error(json.error);\r\n  }\r\n  return json;\r\n};\r\n\r\nconst httpPost = async (path: string, data: Record<string, any> = {}) => {\r\n  const url = `${API_URL}/${path}`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // add the token from localStorage into every request\r\n      'X-Token': getToken(),\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  const json = await response.json();\r\n  if (json.error) {\r\n    throw new Error(json.error);\r\n  }\r\n  return json;\r\n};\r\n\r\n//\r\n// Exported API functions\r\n//\r\n\r\n// open a WebSocket connection to the server\r\nexport const getEventsSocket = () => {\r\n  return new WebSocket(WS_URL);\r\n};\r\n\r\nexport const connect = async (host: string, cert: string, macaroon: string) => {\r\n  const request = { host, cert, macaroon };\r\n  const { token } = await httpPost('connect', request);\r\n  // save the token into the browser's storage\r\n  setToken(token);\r\n};\r\n\r\nexport const getInfo = async () => {\r\n  return await httpGet('info');\r\n};\r\n\r\nexport const fetchPosts = async () => {\r\n  return await httpGet('posts');\r\n};\r\n\r\nexport const createPost = async (title: string, content: string) => {\r\n  const request = { title, content };\r\n  return await httpPost('posts', request);\r\n};\r\n\r\nexport const createInvoice = async (postId: number) => {\r\n  return await httpPost(`posts/${postId}/invoice`);\r\n};\r\n\r\nexport const upvotePost = async (postId: number, hash: string) => {\r\n  const request = { hash };\r\n  return await httpPost(`posts/${postId}/upvote`, request);\r\n};\r\n\r\nexport const verifyPost = async (postId: number) => {\r\n  return await httpPost(`posts/${postId}/verify`);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}