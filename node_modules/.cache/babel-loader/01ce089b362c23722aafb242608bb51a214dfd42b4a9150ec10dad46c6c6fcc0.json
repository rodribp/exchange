{"ast":null,"code":"//\n// Constants\n//\nconst API_URL = 'http://localhost:4000/api';\nconst WS_URL = 'ws://localhost:4000/api/events';\n\n//\n// Shared fetch wrapper funcs\n//\n\nconst httpGet = async path => {\n  const url = `${API_URL}/${path}`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const json = await response.json();\n  if (json.error) {\n    throw new Error(json.error);\n  }\n  return json;\n};\nconst httpPost = async function (path) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const url = `${API_URL}/${path}`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  const json = await response.json();\n  if (json.error) {\n    throw new Error(json.error);\n  }\n  return json;\n};\n\n//\n// Exported API functions\n//\n\n// open a WebSocket connection to the server\nexport const getEventsSocket = () => {\n  return new WebSocket(WS_URL);\n};\nexport const fetchPosts = async () => {\n  return await httpGet('posts');\n};\nexport const createPost = async (username, title, content) => {\n  const request = {\n    username,\n    title,\n    content\n  };\n  return await httpPost('posts', request);\n};\nexport const upvotePost = async postId => {\n  return await httpPost(`posts/${postId}/upvote`);\n};","map":{"version":3,"names":["API_URL","WS_URL","httpGet","path","url","response","fetch","method","headers","json","error","Error","httpPost","data","body","JSON","stringify","getEventsSocket","WebSocket","fetchPosts","createPost","username","title","content","request","upvotePost","postId"],"sources":["C:/Users/rodri/Desktop/builders-guide-sample-app/src/lib/api.ts"],"sourcesContent":["//\r\n// Constants\r\n//\r\nconst API_URL = 'http://localhost:4000/api';\r\nconst WS_URL = 'ws://localhost:4000/api/events';\r\n\r\n//\r\n// Shared fetch wrapper funcs\r\n//\r\n\r\nconst httpGet = async (path: string) => {\r\n  const url = `${API_URL}/${path}`;\r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  const json = await response.json();\r\n  if (json.error) {\r\n    throw new Error(json.error);\r\n  }\r\n  return json;\r\n};\r\n\r\nconst httpPost = async (path: string, data: Record<string, any> = {}) => {\r\n  const url = `${API_URL}/${path}`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  const json = await response.json();\r\n  if (json.error) {\r\n    throw new Error(json.error);\r\n  }\r\n  return json;\r\n};\r\n\r\n//\r\n// Exported API functions\r\n//\r\n\r\n// open a WebSocket connection to the server\r\nexport const getEventsSocket = () => {\r\n  return new WebSocket(WS_URL);\r\n};\r\n\r\nexport const fetchPosts = async () => {\r\n  return await httpGet('posts');\r\n};\r\n\r\nexport const createPost = async (\r\n  username: string,\r\n  title: string,\r\n  content: string\r\n) => {\r\n  const request = { username, title, content };\r\n  return await httpPost('posts', request);\r\n};\r\n\r\nexport const upvotePost = async (postId: number) => {\r\n  return await httpPost(`posts/${postId}/upvote`);\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,OAAO,GAAG,2BAA2B;AAC3C,MAAMC,MAAM,GAAG,gCAAgC;;AAE/C;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,MAAOC,IAAY,IAAK;EACtC,MAAMC,GAAG,GAAI,GAAEJ,OAAQ,IAAGG,IAAK,EAAC;EAChC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAChCG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,EAAE;EAClC,IAAIA,IAAI,CAACC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACC,KAAK,CAAC;EAC7B;EACA,OAAOD,IAAI;AACb,CAAC;AAED,MAAMG,QAAQ,GAAG,gBAAOT,IAAY,EAAqC;EAAA,IAAnCU,IAAyB,uEAAG,CAAC,CAAC;EAClE,MAAMT,GAAG,GAAI,GAAEJ,OAAQ,IAAGG,IAAK,EAAC;EAChC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAChCG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;EAC3B,CAAC,CAAC;EACF,MAAMJ,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,EAAE;EAClC,IAAIA,IAAI,CAACC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACC,KAAK,CAAC;EAC7B;EACA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;;AAEA;AACA,OAAO,MAAMQ,eAAe,GAAG,MAAM;EACnC,OAAO,IAAIC,SAAS,CAACjB,MAAM,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAG,YAAY;EACpC,OAAO,MAAMjB,OAAO,CAAC,OAAO,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAG,OACxBC,QAAgB,EAChBC,KAAa,EACbC,OAAe,KACZ;EACH,MAAMC,OAAO,GAAG;IAAEH,QAAQ;IAAEC,KAAK;IAAEC;EAAQ,CAAC;EAC5C,OAAO,MAAMX,QAAQ,CAAC,OAAO,EAAEY,OAAO,CAAC;AACzC,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,MAAc,IAAK;EAClD,OAAO,MAAMd,QAAQ,CAAE,SAAQc,MAAO,SAAQ,CAAC;AACjD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}