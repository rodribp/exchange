{"ast":null,"code":"import { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { createTrackingData, recordReactionAsCommitted, scheduleCleanupOfReactionIfLeaked } from \"./utils/reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useForceUpdate } from \"./utils/utils\";\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\" + baseComponentName;\n}\nexport function useObserver(fn, baseComponentName) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n  var forceUpdate = useForceUpdate();\n  // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n  var reactionTrackingRef = React.useRef(null);\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction_1 = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData_1.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.  The easiest way to do that is just to\n        // drop our current reaction and allow useEffect() to recreate it.\n        newReaction_1.dispose();\n        reactionTrackingRef.current = null;\n      }\n    });\n    var trackingData_1 = createTrackingData(newReaction_1);\n    reactionTrackingRef.current = trackingData_1;\n    scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n  }\n  var reaction = reactionTrackingRef.current.reaction;\n  React.useDebugValue(reaction, printDebugValue);\n  React.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n    if (reactionTrackingRef.current) {\n      // Great. We've already got our reaction from our render;\n      // all we need to do is to record that it's now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true;\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This is either due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up, or we got a observable change\n      // between render and useEffect\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We've definitely already been mounted at this point\n          forceUpdate();\n        }),\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []);\n  // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions caught during rendering\n  }\n\n  return rendering;\n}","map":{"version":3,"names":["Reaction","React","printDebugValue","createTrackingData","recordReactionAsCommitted","scheduleCleanupOfReactionIfLeaked","isUsingStaticRendering","useForceUpdate","observerComponentNameFor","baseComponentName","useObserver","fn","forceUpdate","reactionTrackingRef","useRef","current","newReaction_1","trackingData_1","mounted","dispose","reaction","useDebugValue","useEffect","cleanAt","Infinity","rendering","exception","track","e"],"sources":["C:/Users/rodri/Desktop/builders-guide-sample-app/node_modules/mobx-react-lite/es/useObserver.js"],"sourcesContent":["import { Reaction } from \"mobx\";\nimport React from \"react\";\nimport { printDebugValue } from \"./utils/printDebugValue\";\nimport { createTrackingData, recordReactionAsCommitted, scheduleCleanupOfReactionIfLeaked } from \"./utils/reactionCleanupTracking\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useForceUpdate } from \"./utils/utils\";\nfunction observerComponentNameFor(baseComponentName) {\n    return \"observer\" + baseComponentName;\n}\nexport function useObserver(fn, baseComponentName) {\n    if (baseComponentName === void 0) { baseComponentName = \"observed\"; }\n    if (isUsingStaticRendering()) {\n        return fn();\n    }\n    var forceUpdate = useForceUpdate();\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    var reactionTrackingRef = React.useRef(null);\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n        var newReaction_1 = new Reaction(observerComponentNameFor(baseComponentName), function () {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData_1.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate();\n            }\n            else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction_1.dispose();\n                reactionTrackingRef.current = null;\n            }\n        });\n        var trackingData_1 = createTrackingData(newReaction_1);\n        reactionTrackingRef.current = trackingData_1;\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n    }\n    var reaction = reactionTrackingRef.current.reaction;\n    React.useDebugValue(reaction, printDebugValue);\n    React.useEffect(function () {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef);\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true;\n        }\n        else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n                    // We've definitely already been mounted at this point\n                    forceUpdate();\n                }),\n                cleanAt: Infinity\n            };\n            forceUpdate();\n        }\n        return function () {\n            reactionTrackingRef.current.reaction.dispose();\n            reactionTrackingRef.current = null;\n        };\n    }, []);\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    var rendering;\n    var exception;\n    reaction.track(function () {\n        try {\n            rendering = fn();\n        }\n        catch (e) {\n            exception = e;\n        }\n    });\n    if (exception) {\n        throw exception; // re-throw any exceptions caught during rendering\n    }\n    return rendering;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,kBAAkB,EAAEC,yBAAyB,EAAEC,iCAAiC,QAAQ,iCAAiC;AAClI,SAASC,sBAAsB,QAAQ,mBAAmB;AAC1D,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,wBAAwB,CAACC,iBAAiB,EAAE;EACjD,OAAO,UAAU,GAAGA,iBAAiB;AACzC;AACA,OAAO,SAASC,WAAW,CAACC,EAAE,EAAEF,iBAAiB,EAAE;EAC/C,IAAIA,iBAAiB,KAAK,KAAK,CAAC,EAAE;IAAEA,iBAAiB,GAAG,UAAU;EAAE;EACpE,IAAIH,sBAAsB,EAAE,EAAE;IAC1B,OAAOK,EAAE,EAAE;EACf;EACA,IAAIC,WAAW,GAAGL,cAAc,EAAE;EAClC;EACA;EACA;EACA,IAAIM,mBAAmB,GAAGZ,KAAK,CAACa,MAAM,CAAC,IAAI,CAAC;EAC5C,IAAI,CAACD,mBAAmB,CAACE,OAAO,EAAE;IAC9B;IACA;IACA,IAAIC,aAAa,GAAG,IAAIhB,QAAQ,CAACQ,wBAAwB,CAACC,iBAAiB,CAAC,EAAE,YAAY;MACtF;MACA;MACA;MACA;MACA;MACA,IAAIQ,cAAc,CAACC,OAAO,EAAE;QACxB;QACAN,WAAW,EAAE;MACjB,CAAC,MACI;QACD;QACA;QACA;QACAI,aAAa,CAACG,OAAO,EAAE;QACvBN,mBAAmB,CAACE,OAAO,GAAG,IAAI;MACtC;IACJ,CAAC,CAAC;IACF,IAAIE,cAAc,GAAGd,kBAAkB,CAACa,aAAa,CAAC;IACtDH,mBAAmB,CAACE,OAAO,GAAGE,cAAc;IAC5CZ,iCAAiC,CAACQ,mBAAmB,CAAC;EAC1D;EACA,IAAIO,QAAQ,GAAGP,mBAAmB,CAACE,OAAO,CAACK,QAAQ;EACnDnB,KAAK,CAACoB,aAAa,CAACD,QAAQ,EAAElB,eAAe,CAAC;EAC9CD,KAAK,CAACqB,SAAS,CAAC,YAAY;IACxB;IACAlB,yBAAyB,CAACS,mBAAmB,CAAC;IAC9C,IAAIA,mBAAmB,CAACE,OAAO,EAAE;MAC7B;MACA;MACA;MACAF,mBAAmB,CAACE,OAAO,CAACG,OAAO,GAAG,IAAI;IAC9C,CAAC,MACI;MACD;MACA;MACA;MACA;MACA;MACA;MACAL,mBAAmB,CAACE,OAAO,GAAG;QAC1BK,QAAQ,EAAE,IAAIpB,QAAQ,CAACQ,wBAAwB,CAACC,iBAAiB,CAAC,EAAE,YAAY;UAC5E;UACAG,WAAW,EAAE;QACjB,CAAC,CAAC;QACFW,OAAO,EAAEC;MACb,CAAC;MACDZ,WAAW,EAAE;IACjB;IACA,OAAO,YAAY;MACfC,mBAAmB,CAACE,OAAO,CAACK,QAAQ,CAACD,OAAO,EAAE;MAC9CN,mBAAmB,CAACE,OAAO,GAAG,IAAI;IACtC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN;EACA;EACA;EACA,IAAIU,SAAS;EACb,IAAIC,SAAS;EACbN,QAAQ,CAACO,KAAK,CAAC,YAAY;IACvB,IAAI;MACAF,SAAS,GAAGd,EAAE,EAAE;IACpB,CAAC,CACD,OAAOiB,CAAC,EAAE;MACNF,SAAS,GAAGE,CAAC;IACjB;EACJ,CAAC,CAAC;EACF,IAAIF,SAAS,EAAE;IACX,MAAMA,SAAS,CAAC,CAAC;EACrB;;EACA,OAAOD,SAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}